// NOTE: This is generated by 'w3 codegen', DO NOT MODIFY

// @ts-noCheck
import {
  UInt,
  UInt8,
  UInt16,
  UInt32,
  Int,
  Int8,
  Int16,
  Int32,
  Bytes,
  BigInt,
  Json,
  String,
  Boolean
} from "../baseTypes";
import {
  TxReceipt,
  TxResponse,
  TxRequest,
  TxOverrides,
  StaticTxResult,
  Log,
  EventNotification,
  Access,
  Connection,
  Network,
} from "./types";
import * as QueryInputs from "./query";
import * as MutationInputs from "./mutation";
import { Client, Uri, ExtensionInvocation, Extension, ExtensionConfig, ExtensionFactory, InvokeApiOptions } from "@web3api/core-js";

export interface EthereumExtensionConfig extends ExtensionConfig {}

export interface IEthereumExtension extends Extension, QueryInputs.EthereumQueryModule, MutationInputs.EthereumMutationModule {}

class EthereumExtension implements IEthereumExtension {

  private client: Client;
  readonly uri: Uri;
  readonly config: EthereumExtensionConfig;

  constructor(client: Client, config: EthereumExtensionConfig) {
    this.client = client;
    if (config?.uri) {
      if (typeof config.uri === "string") {
        this.uri = new Uri(config.uri);
      } else {
        this.uri = config.uri as Uri;
      }
    } else {
      this.uri = new Uri("w3://fs//Users/kris/WebstormProjects/integrations/uniswapv3/dapp/node_modules/@web3api/ethereum-plugin-js/build");
    }
    this.config = config;
  }

  callContractView(
    input: QueryInputs.Input_callContractView,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "callContractView",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  callContractStatic(
    input: QueryInputs.Input_callContractStatic,
  ): ExtensionInvocation<StaticTxResult> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "callContractStatic",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<StaticTxResult>(options),
    };
  }

  encodeParams(
    input: QueryInputs.Input_encodeParams,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "encodeParams",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  encodeFunction(
    input: QueryInputs.Input_encodeFunction,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "encodeFunction",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  getSignerAddress(
    input: QueryInputs.Input_getSignerAddress,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getSignerAddress",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  getSignerBalance(
    input: QueryInputs.Input_getSignerBalance,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getSignerBalance",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  getSignerTransactionCount(
    input: QueryInputs.Input_getSignerTransactionCount,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getSignerTransactionCount",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  getGasPrice(
    input: QueryInputs.Input_getGasPrice,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getGasPrice",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  estimateTransactionGas(
    input: QueryInputs.Input_estimateTransactionGas,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "estimateTransactionGas",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  estimateContractCallGas(
    input: QueryInputs.Input_estimateContractCallGas,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "estimateContractCallGas",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  checkAddress(
    input: QueryInputs.Input_checkAddress,
  ): ExtensionInvocation<Boolean> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "checkAddress",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Boolean>(options),
    };
  }

  toWei(
    input: QueryInputs.Input_toWei,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "toWei",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  toEth(
    input: QueryInputs.Input_toEth,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "toEth",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  awaitTransaction(
    input: QueryInputs.Input_awaitTransaction,
  ): ExtensionInvocation<TxReceipt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "awaitTransaction",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TxReceipt>(options),
    };
  }

  waitForEvent(
    input: QueryInputs.Input_waitForEvent,
  ): ExtensionInvocation<EventNotification> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "waitForEvent",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<EventNotification>(options),
    };
  }

  getNetwork(
    input: QueryInputs.Input_getNetwork,
  ): ExtensionInvocation<Network> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getNetwork",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Network>(options),
    };
  }

  callContractMethod(
    input: MutationInputs.Input_callContractMethod,
  ): ExtensionInvocation<TxResponse> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "callContractMethod",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TxResponse>(options),
    };
  }

  callContractMethodAndWait(
    input: MutationInputs.Input_callContractMethodAndWait,
  ): ExtensionInvocation<TxReceipt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "callContractMethodAndWait",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TxReceipt>(options),
    };
  }

  sendTransaction(
    input: MutationInputs.Input_sendTransaction,
  ): ExtensionInvocation<TxResponse> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "sendTransaction",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TxResponse>(options),
    };
  }

  sendTransactionAndWait(
    input: MutationInputs.Input_sendTransactionAndWait,
  ): ExtensionInvocation<TxReceipt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "sendTransactionAndWait",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TxReceipt>(options),
    };
  }

  deployContract(
    input: MutationInputs.Input_deployContract,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "deployContract",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  signMessage(
    input: MutationInputs.Input_signMessage,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "signMessage",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  sendRPC(
    input: MutationInputs.Input_sendRPC,
  ): ExtensionInvocation<String | null> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "sendRPC",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String | null>(options),
    };
  }

}

export const ethereumExtension: ExtensionFactory<EthereumExtensionConfig> = (
  opts: EthereumExtensionConfig
) => {
  return {
    factory: (client: Client) => new EthereumExtension(client, opts),
    namespace: `ethereum`
  };
};
