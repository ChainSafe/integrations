// NOTE: This is generated by 'w3 codegen', DO NOT MODIFY

// @ts-noCheck
import {
  UInt,
  UInt8,
  UInt16,
  UInt32,
  Int,
  Int8,
  Int16,
  Int32,
  Bytes,
  BigInt,
  Json,
  String,
  Boolean
} from "../baseTypes";
import {
  SwapArgs,
  Currency,
  Token,
  Route,
  Tick,
  TickListDataProvider,
  Pool,
  Trade,
  TokenAmount,
  TradeSwap,
  Price,
  SwapOptions,
  PermitOptions,
  FeeOptions,
  MethodParameters,
  GasOptions,
  NextTickResult,
  PoolChangeResult,
  TradeRoute,
  IncentiveKey,
  ClaimOptions,
  FullWithdrawOptions,
  QuoteOptions,
  CommonAddLiquidityOptions,
  AddLiquidityOptions,
  SafeTransferOptions,
  CollectOptions,
  NFTPermitOptions,
  RemoveLiquidityOptions,
  BestTradeOptions,
  Position,
  MintAmounts,
  ChainIdEnum,
  ChainIdString,
  ChainId,
  FeeAmountEnum,
  FeeAmountString,
  FeeAmount,
  TradeTypeEnum,
  TradeTypeString,
  TradeType,
  PermitVEnum,
  PermitVString,
  PermitV,
  RoundingEnum,
  RoundingString,
  Rounding,
  Ethereum_Connection,
  Ethereum_TxOverrides,
  Ethereum_TxResponse,
  Ethereum_Access,
  Ethereum_TxReceipt,
  Ethereum_Log,
  Ethereum_TxRequest,
  Ethereum_StaticTxResult,
  Ethereum_EventNotification,
  Ethereum_Network,
  ERC20_Ethereum_Connection,
  Ethereum_Mutation,
  Ethereum_Query,
  SHA3_Query,
  EthersSolidity_Query,
  ERC20_Query,
  Subgraph_Query,
} from "./types";
import { ExtensionInvocation } from "@web3api/core-js";

export interface Input_currencyEquals extends Record<string, unknown> {
  currencyA: Currency;
  currencyB: Currency;
}

export interface Input_tokenEquals extends Record<string, unknown> {
  tokenA: Token;
  tokenB: Token;
}

export interface Input_tokenAmountEquals extends Record<string, unknown> {
  tokenAmountA: TokenAmount;
  tokenAmountB: TokenAmount;
}

export interface Input_tokenSortsBefore extends Record<string, unknown> {
  tokenA: Token;
  tokenB: Token;
}

export interface Input_getEther extends Record<string, unknown> {
  chainId: ChainId;
}

export interface Input_getWETH extends Record<string, unknown> {
  chainId: ChainId;
}

export interface Input_isEther extends Record<string, unknown> {
  token: Token;
}

export interface Input_wrapToken extends Record<string, unknown> {
  token: Token;
}

export interface Input_wrapAmount extends Record<string, unknown> {
  amount: TokenAmount;
}

export interface Input_createTickListDataProvider extends Record<string, unknown> {
  ticks: Array<Tick>;
  tickSpacing: Int32;
}

export interface Input_getTick extends Record<string, unknown> {
  tickDataProvider: TickListDataProvider;
  tickIndex: Int32;
}

export interface Input_nextInitializedTickWithinOneWord extends Record<string, unknown> {
  tickDataProvider: TickListDataProvider;
  tick: Int32;
  lte: Boolean;
  tickSpacing: Int32;
}

export interface Input_createPool extends Record<string, unknown> {
  tokenA: Token;
  tokenB: Token;
  fee: FeeAmount;
  sqrtRatioX96: BigInt;
  liquidity: BigInt;
  tickCurrent: Int32;
  ticks?: TickListDataProvider | null;
}

export interface Input_getPoolAddress extends Record<string, unknown> {
  tokenA: Token;
  tokenB: Token;
  fee: FeeAmount;
  initCodeHashManualOverride?: String | null;
}

export interface Input_poolInvolvesToken extends Record<string, unknown> {
  pool: Pool;
  token: Token;
}

export interface Input_poolToken0Price extends Record<string, unknown> {
  pool: Pool;
}

export interface Input_poolToken1Price extends Record<string, unknown> {
  pool: Pool;
}

export interface Input_poolPriceOf extends Record<string, unknown> {
  pool: Pool;
  token: Token;
}

export interface Input_poolChainId extends Record<string, unknown> {
  pool: Pool;
}

export interface Input_getPoolOutputAmount extends Record<string, unknown> {
  pool: Pool;
  inputAmount: TokenAmount;
  sqrtPriceLimitX96?: BigInt | null;
}

export interface Input_getPoolInputAmount extends Record<string, unknown> {
  pool: Pool;
  outputAmount: TokenAmount;
  sqrtPriceLimitX96?: BigInt | null;
}

export interface Input_getPoolTickSpacing extends Record<string, unknown> {
  pool: Pool;
}

export interface Input_createRoute extends Record<string, unknown> {
  pools: Array<Pool>;
  inToken: Token;
  outToken: Token;
}

export interface Input_routeChainId extends Record<string, unknown> {
  route: Route;
}

export interface Input_routeMidPrice extends Record<string, unknown> {
  route: Route;
}

export interface Input_createTradeExactIn extends Record<string, unknown> {
  tradeRoute: TradeRoute;
}

export interface Input_createTradeExactOut extends Record<string, unknown> {
  tradeRoute: TradeRoute;
}

export interface Input_createTradeFromRoute extends Record<string, unknown> {
  tradeRoute: TradeRoute;
  tradeType: TradeType;
}

export interface Input_createTradeFromRoutes extends Record<string, unknown> {
  tradeRoutes: Array<TradeRoute>;
  tradeType: TradeType;
}

export interface Input_createUncheckedTrade extends Record<string, unknown> {
  swap: TradeSwap;
  tradeType: TradeType;
}

export interface Input_createUncheckedTradeWithMultipleRoutes extends Record<string, unknown> {
  swaps: Array<TradeSwap>;
  tradeType: TradeType;
}

export interface Input_tradeInputAmount extends Record<string, unknown> {
  swaps: Array<TradeSwap>;
}

export interface Input_tradeOutputAmount extends Record<string, unknown> {
  swaps: Array<TradeSwap>;
}

export interface Input_tradeExecutionPrice extends Record<string, unknown> {
  inputAmount: TokenAmount;
  outputAmount: TokenAmount;
}

export interface Input_tradePriceImpact extends Record<string, unknown> {
  swaps: Array<TradeSwap>;
  outputAmount: TokenAmount;
}

export interface Input_tradeMinimumAmountOut extends Record<string, unknown> {
  slippageTolerance: String;
  amountOut: TokenAmount;
  tradeType: TradeType;
}

export interface Input_tradeMaximumAmountIn extends Record<string, unknown> {
  slippageTolerance: String;
  amountIn: TokenAmount;
  tradeType: TradeType;
}

export interface Input_tradeWorstExecutionPrice extends Record<string, unknown> {
  trade: Trade;
  slippageTolerance: String;
}

export interface Input_bestTradeExactIn extends Record<string, unknown> {
  pools: Array<Pool>;
  amountIn: TokenAmount;
  tokenOut: Token;
  options?: BestTradeOptions | null;
}

export interface Input_bestTradeExactOut extends Record<string, unknown> {
  pools: Array<Pool>;
  tokenIn: Token;
  amountOut: TokenAmount;
  options?: BestTradeOptions | null;
}

export interface Input_createPosition extends Record<string, unknown> {
  pool: Pool;
  tickLower: Int32;
  tickUpper: Int32;
  liquidity: BigInt;
}

export interface Input_createPositionFromAmounts extends Record<string, unknown> {
  pool: Pool;
  tickLower: Int32;
  tickUpper: Int32;
  amount0: BigInt;
  amount1: BigInt;
  useFullPrecision: Boolean;
}

export interface Input_createPositionFromAmount0 extends Record<string, unknown> {
  pool: Pool;
  tickLower: Int32;
  tickUpper: Int32;
  amount0: BigInt;
  useFullPrecision: Boolean;
}

export interface Input_createPositionFromAmount1 extends Record<string, unknown> {
  pool: Pool;
  tickLower: Int32;
  tickUpper: Int32;
  amount1: BigInt;
}

export interface Input_positionToken0PriceLower extends Record<string, unknown> {
  position: Position;
}

export interface Input_positionToken0PriceUpper extends Record<string, unknown> {
  position: Position;
}

export interface Input_positionAmount0 extends Record<string, unknown> {
  position: Position;
}

export interface Input_positionAmount1 extends Record<string, unknown> {
  position: Position;
}

export interface Input_mintAmounts extends Record<string, unknown> {
  position: Position;
}

export interface Input_mintAmountsWithSlippage extends Record<string, unknown> {
  position: Position;
  slippageTolerance: String;
}

export interface Input_burnAmountsWithSlippage extends Record<string, unknown> {
  position: Position;
  slippageTolerance: String;
}

export interface Input_swapCallParameters extends Record<string, unknown> {
  trades: Array<Trade>;
  options: SwapOptions;
}

export interface Input_encodeRouteToPath extends Record<string, unknown> {
  route: Route;
  exactOutput: Boolean;
}

export interface Input_encodePermit extends Record<string, unknown> {
  token: Token;
  options: PermitOptions;
}

export interface Input_encodeUnwrapWETH9 extends Record<string, unknown> {
  amountMinimum: BigInt;
  recipient: String;
  feeOptions?: FeeOptions | null;
}

export interface Input_encodeSweepToken extends Record<string, unknown> {
  token: Token;
  amountMinimum: BigInt;
  recipient: String;
  feeOptions?: FeeOptions | null;
}

export interface Input_encodeRefundETH extends Record<string, unknown> {
}

export interface Input_encodeMulticall extends Record<string, unknown> {
  calldatas: Array<String>;
}

export interface Input_collectRewards extends Record<string, unknown> {
  incentiveKeys: Array<IncentiveKey>;
  options: ClaimOptions;
}

export interface Input_withdrawToken extends Record<string, unknown> {
  incentiveKeys: Array<IncentiveKey>;
  options: FullWithdrawOptions;
}

export interface Input_encodeDeposit extends Record<string, unknown> {
  incentiveKeys: Array<IncentiveKey>;
}

export interface Input_quoteCallParameters extends Record<string, unknown> {
  route: Route;
  amount: TokenAmount;
  tradeType: TradeType;
  options?: QuoteOptions | null;
}

export interface Input_createCallParameters extends Record<string, unknown> {
  pool: Pool;
}

export interface Input_addCallParameters extends Record<string, unknown> {
  position: Position;
  options: AddLiquidityOptions;
}

export interface Input_collectCallParameters extends Record<string, unknown> {
  options: CollectOptions;
}

export interface Input_removeCallParameters extends Record<string, unknown> {
  position: Position;
  options: RemoveLiquidityOptions;
}

export interface Input_safeTransferFromParameters extends Record<string, unknown> {
  options: SafeTransferOptions;
}

export interface Input_toHex extends Record<string, unknown> {
  value: BigInt;
}

export interface Input_computePoolAddress extends Record<string, unknown> {
  factoryAddress: String;
  tokenA: Token;
  tokenB: Token;
  fee: FeeAmount;
  initCodeHashManualOverride?: String | null;
}

export interface Input_encodeSqrtRatioX96 extends Record<string, unknown> {
  amount1: BigInt;
  amount0: BigInt;
}

export interface Input_mulDivRoundingUp extends Record<string, unknown> {
  a: BigInt;
  b: BigInt;
  denominator: BigInt;
}

export interface Input_addDelta extends Record<string, unknown> {
  x: BigInt;
  y: BigInt;
}

export interface Input_maxLiquidityForAmounts extends Record<string, unknown> {
  sqrtRatioCurrentX96: BigInt;
  sqrtRatioAX96: BigInt;
  sqrtRatioBX96: BigInt;
  amount0: BigInt;
  amount1: BigInt;
  useFullPrecision: Boolean;
}

export interface Input_mostSignificantBit extends Record<string, unknown> {
  x: BigInt;
}

export interface Input_nearestUsableTick extends Record<string, unknown> {
  tick: Int32;
  tickSpacing: Int32;
}

export interface Input_tickToPrice extends Record<string, unknown> {
  baseToken: Token;
  quoteToken: Token;
  tick: Int32;
}

export interface Input_priceToClosestTick extends Record<string, unknown> {
  price: Price;
}

export interface Input_getAmount0Delta extends Record<string, unknown> {
  sqrtRatioAX96: BigInt;
  sqrtRatioBX96: BigInt;
  liquidity: BigInt;
  roundUp: Boolean;
}

export interface Input_getAmount1Delta extends Record<string, unknown> {
  sqrtRatioAX96: BigInt;
  sqrtRatioBX96: BigInt;
  liquidity: BigInt;
  roundUp: Boolean;
}

export interface Input_getNextSqrtPriceFromInput extends Record<string, unknown> {
  sqrtPX96: BigInt;
  liquidity: BigInt;
  amountIn: BigInt;
  zeroForOne: Boolean;
}

export interface Input_getNextSqrtPriceFromOutput extends Record<string, unknown> {
  sqrtPX96: BigInt;
  liquidity: BigInt;
  amountOut: BigInt;
  zeroForOne: Boolean;
}

export interface Input_validateTickList extends Record<string, unknown> {
  ticks: Array<Tick>;
  tickSpacing: Int32;
}

export interface Input_tickIsBelowSmallest extends Record<string, unknown> {
  ticks: Array<Tick>;
  tick: Int32;
}

export interface Input_tickIsAtOrAboveLargest extends Record<string, unknown> {
  ticks: Array<Tick>;
  tick: Int32;
}

export interface Input_nextInitializedTick extends Record<string, unknown> {
  ticks: Array<Tick>;
  tick: Int32;
  lte: Boolean;
}

export interface Input_tickListIsSorted extends Record<string, unknown> {
  ticks: Array<Tick>;
}

export interface Input_getSqrtRatioAtTick extends Record<string, unknown> {
  tick: Int32;
}

export interface Input_getTickAtSqrtRatio extends Record<string, unknown> {
  sqrtRatioX96: BigInt;
}

export interface Input_fetchToken extends Record<string, unknown> {
  address: String;
  chainId: ChainId;
}

export interface Input_fetchPoolFromTokens extends Record<string, unknown> {
  tokenA: Token;
  tokenB: Token;
  fee: FeeAmount;
  fetchTicks: Boolean;
}

export interface Input_fetchPoolFromAddress extends Record<string, unknown> {
  address: String;
  chainId: ChainId;
  fetchTicks: Boolean;
}

export interface Input_fetchTickList extends Record<string, unknown> {
  address: String;
  chainId: ChainId;
}

export interface Input_feeAmountToTickSpacing extends Record<string, unknown> {
  feeAmount: FeeAmount;
}

export interface Input_getFeeAmount extends Record<string, unknown> {
  feeAmount: FeeAmount;
}

export interface Input_getPermitV extends Record<string, unknown> {
  permitV: PermitV;
}

export interface Input_FACTORY_ADDRESS extends Record<string, unknown> {
}

export interface Input_POOL_INIT_CODE_HASH extends Record<string, unknown> {
}

export interface Input_POOL_INIT_CODE_HASH_OPTIMISM extends Record<string, unknown> {
}

export interface Input_POOL_INIT_CODE_HASH_OPTIMISM_KOVAN extends Record<string, unknown> {
}

export interface Input_MIN_TICK extends Record<string, unknown> {
}

export interface Input_MAX_TICK extends Record<string, unknown> {
}

export interface Input_MIN_SQRT_RATIO extends Record<string, unknown> {
}

export interface Input_MAX_SQRT_RATIO extends Record<string, unknown> {
}

export interface UniswapQueryModule {
  currencyEquals(input: Input_currencyEquals): ExtensionInvocation<Boolean>;
  tokenEquals(input: Input_tokenEquals): ExtensionInvocation<Boolean>;
  tokenAmountEquals(input: Input_tokenAmountEquals): ExtensionInvocation<Boolean>;
  tokenSortsBefore(input: Input_tokenSortsBefore): ExtensionInvocation<Boolean>;
  getEther(input: Input_getEther): ExtensionInvocation<Token>;
  getWETH(input: Input_getWETH): ExtensionInvocation<Token>;
  isEther(input: Input_isEther): ExtensionInvocation<Boolean>;
  wrapToken(input: Input_wrapToken): ExtensionInvocation<Token>;
  wrapAmount(input: Input_wrapAmount): ExtensionInvocation<TokenAmount>;
  createTickListDataProvider(input: Input_createTickListDataProvider): ExtensionInvocation<TickListDataProvider>;
  getTick(input: Input_getTick): ExtensionInvocation<Tick>;
  nextInitializedTickWithinOneWord(input: Input_nextInitializedTickWithinOneWord): ExtensionInvocation<NextTickResult>;
  createPool(input: Input_createPool): ExtensionInvocation<Pool>;
  getPoolAddress(input: Input_getPoolAddress): ExtensionInvocation<String>;
  poolInvolvesToken(input: Input_poolInvolvesToken): ExtensionInvocation<Boolean>;
  poolToken0Price(input: Input_poolToken0Price): ExtensionInvocation<Price>;
  poolToken1Price(input: Input_poolToken1Price): ExtensionInvocation<Price>;
  poolPriceOf(input: Input_poolPriceOf): ExtensionInvocation<Price>;
  poolChainId(input: Input_poolChainId): ExtensionInvocation<ChainId>;
  getPoolOutputAmount(input: Input_getPoolOutputAmount): ExtensionInvocation<PoolChangeResult>;
  getPoolInputAmount(input: Input_getPoolInputAmount): ExtensionInvocation<PoolChangeResult>;
  getPoolTickSpacing(input: Input_getPoolTickSpacing): ExtensionInvocation<Int32>;
  createRoute(input: Input_createRoute): ExtensionInvocation<Route>;
  routeChainId(input: Input_routeChainId): ExtensionInvocation<ChainId>;
  routeMidPrice(input: Input_routeMidPrice): ExtensionInvocation<Price>;
  createTradeExactIn(input: Input_createTradeExactIn): ExtensionInvocation<Trade>;
  createTradeExactOut(input: Input_createTradeExactOut): ExtensionInvocation<Trade>;
  createTradeFromRoute(input: Input_createTradeFromRoute): ExtensionInvocation<Trade>;
  createTradeFromRoutes(input: Input_createTradeFromRoutes): ExtensionInvocation<Trade>;
  createUncheckedTrade(input: Input_createUncheckedTrade): ExtensionInvocation<Trade>;
  createUncheckedTradeWithMultipleRoutes(input: Input_createUncheckedTradeWithMultipleRoutes): ExtensionInvocation<Trade>;
  tradeInputAmount(input: Input_tradeInputAmount): ExtensionInvocation<TokenAmount>;
  tradeOutputAmount(input: Input_tradeOutputAmount): ExtensionInvocation<TokenAmount>;
  tradeExecutionPrice(input: Input_tradeExecutionPrice): ExtensionInvocation<Price>;
  tradePriceImpact(input: Input_tradePriceImpact): ExtensionInvocation<String>;
  tradeMinimumAmountOut(input: Input_tradeMinimumAmountOut): ExtensionInvocation<TokenAmount>;
  tradeMaximumAmountIn(input: Input_tradeMaximumAmountIn): ExtensionInvocation<TokenAmount>;
  tradeWorstExecutionPrice(input: Input_tradeWorstExecutionPrice): ExtensionInvocation<Price>;
  bestTradeExactIn(input: Input_bestTradeExactIn): ExtensionInvocation<Array<Trade>>;
  bestTradeExactOut(input: Input_bestTradeExactOut): ExtensionInvocation<Array<Trade>>;
  createPosition(input: Input_createPosition): ExtensionInvocation<Position>;
  createPositionFromAmounts(input: Input_createPositionFromAmounts): ExtensionInvocation<Position>;
  createPositionFromAmount0(input: Input_createPositionFromAmount0): ExtensionInvocation<Position>;
  createPositionFromAmount1(input: Input_createPositionFromAmount1): ExtensionInvocation<Position>;
  positionToken0PriceLower(input: Input_positionToken0PriceLower): ExtensionInvocation<Price>;
  positionToken0PriceUpper(input: Input_positionToken0PriceUpper): ExtensionInvocation<Price>;
  positionAmount0(input: Input_positionAmount0): ExtensionInvocation<TokenAmount>;
  positionAmount1(input: Input_positionAmount1): ExtensionInvocation<TokenAmount>;
  mintAmounts(input: Input_mintAmounts): ExtensionInvocation<MintAmounts>;
  mintAmountsWithSlippage(input: Input_mintAmountsWithSlippage): ExtensionInvocation<MintAmounts>;
  burnAmountsWithSlippage(input: Input_burnAmountsWithSlippage): ExtensionInvocation<MintAmounts>;
  swapCallParameters(input: Input_swapCallParameters): ExtensionInvocation<MethodParameters>;
  encodeRouteToPath(input: Input_encodeRouteToPath): ExtensionInvocation<String>;
  encodePermit(input: Input_encodePermit): ExtensionInvocation<String>;
  encodeUnwrapWETH9(input: Input_encodeUnwrapWETH9): ExtensionInvocation<String>;
  encodeSweepToken(input: Input_encodeSweepToken): ExtensionInvocation<String>;
  encodeRefundETH(input: Input_encodeRefundETH): ExtensionInvocation<String>;
  encodeMulticall(input: Input_encodeMulticall): ExtensionInvocation<String>;
  collectRewards(input: Input_collectRewards): ExtensionInvocation<MethodParameters>;
  withdrawToken(input: Input_withdrawToken): ExtensionInvocation<MethodParameters>;
  encodeDeposit(input: Input_encodeDeposit): ExtensionInvocation<String>;
  quoteCallParameters(input: Input_quoteCallParameters): ExtensionInvocation<MethodParameters>;
  createCallParameters(input: Input_createCallParameters): ExtensionInvocation<MethodParameters>;
  addCallParameters(input: Input_addCallParameters): ExtensionInvocation<MethodParameters>;
  collectCallParameters(input: Input_collectCallParameters): ExtensionInvocation<MethodParameters>;
  removeCallParameters(input: Input_removeCallParameters): ExtensionInvocation<MethodParameters>;
  safeTransferFromParameters(input: Input_safeTransferFromParameters): ExtensionInvocation<MethodParameters>;
  toHex(input: Input_toHex): ExtensionInvocation<String>;
  computePoolAddress(input: Input_computePoolAddress): ExtensionInvocation<String>;
  encodeSqrtRatioX96(input: Input_encodeSqrtRatioX96): ExtensionInvocation<BigInt>;
  mulDivRoundingUp(input: Input_mulDivRoundingUp): ExtensionInvocation<BigInt>;
  addDelta(input: Input_addDelta): ExtensionInvocation<BigInt>;
  maxLiquidityForAmounts(input: Input_maxLiquidityForAmounts): ExtensionInvocation<BigInt>;
  mostSignificantBit(input: Input_mostSignificantBit): ExtensionInvocation<UInt32>;
  nearestUsableTick(input: Input_nearestUsableTick): ExtensionInvocation<Int32>;
  tickToPrice(input: Input_tickToPrice): ExtensionInvocation<Price>;
  priceToClosestTick(input: Input_priceToClosestTick): ExtensionInvocation<Int32>;
  getAmount0Delta(input: Input_getAmount0Delta): ExtensionInvocation<BigInt>;
  getAmount1Delta(input: Input_getAmount1Delta): ExtensionInvocation<BigInt>;
  getNextSqrtPriceFromInput(input: Input_getNextSqrtPriceFromInput): ExtensionInvocation<BigInt>;
  getNextSqrtPriceFromOutput(input: Input_getNextSqrtPriceFromOutput): ExtensionInvocation<BigInt>;
  validateTickList(input: Input_validateTickList): ExtensionInvocation<Boolean>;
  tickIsBelowSmallest(input: Input_tickIsBelowSmallest): ExtensionInvocation<Boolean>;
  tickIsAtOrAboveLargest(input: Input_tickIsAtOrAboveLargest): ExtensionInvocation<Boolean>;
  nextInitializedTick(input: Input_nextInitializedTick): ExtensionInvocation<Tick>;
  tickListIsSorted(input: Input_tickListIsSorted): ExtensionInvocation<Boolean>;
  getSqrtRatioAtTick(input: Input_getSqrtRatioAtTick): ExtensionInvocation<BigInt>;
  getTickAtSqrtRatio(input: Input_getTickAtSqrtRatio): ExtensionInvocation<Int32>;
  fetchToken(input: Input_fetchToken): ExtensionInvocation<Token>;
  fetchPoolFromTokens(input: Input_fetchPoolFromTokens): ExtensionInvocation<Pool>;
  fetchPoolFromAddress(input: Input_fetchPoolFromAddress): ExtensionInvocation<Pool>;
  fetchTickList(input: Input_fetchTickList): ExtensionInvocation<Array<Tick>>;
  feeAmountToTickSpacing(input: Input_feeAmountToTickSpacing): ExtensionInvocation<Int32>;
  getFeeAmount(input: Input_getFeeAmount): ExtensionInvocation<UInt32>;
  getPermitV(input: Input_getPermitV): ExtensionInvocation<Int32>;
  FACTORY_ADDRESS(input: Input_FACTORY_ADDRESS): ExtensionInvocation<String>;
  POOL_INIT_CODE_HASH(input: Input_POOL_INIT_CODE_HASH): ExtensionInvocation<String>;
  POOL_INIT_CODE_HASH_OPTIMISM(input: Input_POOL_INIT_CODE_HASH_OPTIMISM): ExtensionInvocation<String>;
  POOL_INIT_CODE_HASH_OPTIMISM_KOVAN(input: Input_POOL_INIT_CODE_HASH_OPTIMISM_KOVAN): ExtensionInvocation<String>;
  MIN_TICK(input: Input_MIN_TICK): ExtensionInvocation<Int32>;
  MAX_TICK(input: Input_MAX_TICK): ExtensionInvocation<Int32>;
  MIN_SQRT_RATIO(input: Input_MIN_SQRT_RATIO): ExtensionInvocation<BigInt>;
  MAX_SQRT_RATIO(input: Input_MAX_SQRT_RATIO): ExtensionInvocation<BigInt>;
}

