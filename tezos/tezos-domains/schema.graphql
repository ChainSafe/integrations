type Connection {
  network: String!
  provider: String
  secretKey: String
}

type SecretKeyParams {
  key: String!
  passphrase: String
}

type FundraiserParams {
  email: String!
  password: String!
  mnemonic: String!
}

type DomainRecords {
  address: String
  data: String
  expiry: String
  name: String!
}

type Result {
  status: Boolean!
  error: String
}

enum AcquisitionState {
  Unobtainable
  Taken
  CanBeBought
  CanBeAuctioned
  AuctionInProgress
  CanBeSettled
}

type AcquisitionInfo {
  cost: UInt32 
  state: AcquisitionState!
}

type Query {
  resolveDomain(
    connection: Connection
    domain: String!
  ): String!

  resolveAddressToDomain(
    connection: Connection
    address: String!
  ): String!

  resolveDomainRecords(
    connection: Connection
    domain: String!
  ): DomainRecords

  getSupportedTlds(
    connection: Connection
  ): [String!]

  getAcquisitionInfo(
    connection: Connection
    domain: String!
    duration: UInt32
  ): AcquisitionInfo
}

type Mutation {
  buyDomain(
    connection: Connection
    domain: String!
    duration: UInt32!
    owner: String!
    confirmation: UInt32
  ): Result!

  createSubDomain(
    connection: Connection
    domain: String!
    subdomain: String!
    owner: String!
    confirmation: UInt32
  ): Result!

  updateDomainRecord(
    connection: Connection
    address: String
    domain: String!
    owner: String!
    records: JSON!
    confirmation: UInt32
  ): Result!

  setSignerWithSecretKeyParams(
    connection: Connection
    params: SecretKeyParams!
  ): Result

  setSignerWithFundraiserParams(
    connection: Connection
    params: FundraiserParams!
  ): Result
}
